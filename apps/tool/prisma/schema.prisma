// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  surname  String
  password String
}

model languages {
  id              Int               @id @default(autoincrement()) @db.SmallInt
  name            String            @unique
  code            String            @unique @db.VarChar(2)
  roles           chat_roles[]
  text_templates  text_templates[]
  text_categories text_categories[]
  image_templates image_templates[]
  chat_categories chat_categories[]
}

model images {
  id              BigInt            @id @default(autoincrement())
  url             String
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  chat_roles      chat_roles[]
  text_templates  text_templates[]
  image_templates image_templates[]
}

model telegram_clients {
  id                          BigInt                        @id
  created_at                  DateTime                      @default(now())
  updated_at                  DateTime                      @updatedAt
  chat_role_interactions      chat_role_interactions[]
  text_template_interactions  text_template_interactions[]
  image_template_interactions image_template_interactions[]
}

model chat_roles {
  id           Int                      @id @default(autoincrement())
  name         String
  prompt       String                   @default("")
  poster       images?                  @relation(fields: [poster_id], references: [id], onDelete: SetNull)
  poster_id    BigInt?
  category     chat_categories          @relation(fields: [category_id], references: [id], onDelete: Cascade)
  category_id  Int
  language     languages                @relation(fields: [language_id], references: [id], onDelete: Cascade)
  language_id  Int
  parameters   chat_role_parameters?
  description  String?
  interactions chat_role_interactions[]
}

model chat_role_parameters {
  id                Int        @id @default(autoincrement())
  role              chat_roles @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id           Int        @unique
  model             String     @default("gpt-3.5-turbo")
  top_p             Float      @default(1)
  temperature       Float      @default(1)
  present_penalty   Float      @default(0)
  frequency_penalty Float      @default(0)
}

model chat_role_interactions {
  id         Int              @id @default(autoincrement())
  type       String
  role       chat_roles       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id    Int
  client     telegram_clients @relation(fields: [client_id], references: [id], onDelete: Cascade)
  client_id  BigInt
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
}

model chat_categories {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  roles       chat_roles[]
  language    languages    @relation(fields: [language_id], references: [id], onDelete: Cascade)
  language_id Int
}

model text_templates {
  id           Int                          @id @default(autoincrement())
  name         String
  poster       images?                      @relation(fields: [poster_id], references: [id], onDelete: SetNull)
  poster_id    BigInt?
  messages     text_template_messages[]
  category     text_categories              @relation(fields: [category_id], references: [id], onDelete: Cascade)
  category_id  Int
  language     languages                    @relation(fields: [language_id], references: [id], onDelete: Cascade)
  language_id  Int
  parameters   text_template_parameters?
  description  String?
  interactions text_template_interactions[]
}

model text_template_parameters {
  id                Int            @id @default(autoincrement())
  model             String         @default("gpt-3.5-turbo")
  top_p             Float          @default(1)
  template          text_templates @relation(fields: [template_id], references: [id], onDelete: Cascade)
  template_id       Int            @unique
  temperature       Float          @default(1)
  present_penalty   Float          @default(0)
  frequency_penalty Float          @default(0)
}

model text_template_messages {
  id           BigInt         @id @default(autoincrement())
  role         String
  content      String
  template     text_templates @relation(fields: [templates_id], references: [id], onDelete: Cascade)
  templates_id Int
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
}

model text_template_interactions {
  id          Int              @id @default(autoincrement())
  type        String
  client      telegram_clients @relation(fields: [client_id], references: [id], onDelete: Cascade)
  client_id   BigInt
  template    text_templates   @relation(fields: [template_id], references: [id], onDelete: Cascade)
  template_id Int
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
}

model text_categories {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  language    languages        @relation(fields: [language_id], references: [id], onDelete: Cascade)
  language_id Int
  templates   text_templates[]
}

model image_templates {
  id           Int                           @id @default(autoincrement())
  name         String
  model        String?
  poster       images?                       @relation(fields: [poster_id], references: [id], onDelete: SetNull)
  poster_id    BigInt?
  provider     String
  language     languages                     @relation(fields: [languages_id], references: [id], onDelete: Cascade)
  languages_id Int
  description  String?
  interactions image_template_interactions[]
}

model image_template_interactions {
  id          Int              @id @default(autoincrement())
  type        String
  client      telegram_clients @relation(fields: [client_id], references: [id], onDelete: Cascade)
  client_id   BigInt
  template    image_templates  @relation(fields: [template_id], references: [id], onDelete: Cascade)
  template_id Int
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
}
