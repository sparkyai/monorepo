// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  first_name String
  last_name  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([first_name, last_name])
}

model languages {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  code            String            @unique @db.VarChar(2)
  chat_roles      chat_roles[]
  text_templates  text_templates[]
  telegram_users  telegram_users[]
  text_categories text_categories[]
  image_templates image_templates[]
  chat_categories chat_categories[]
}

model images {
  id              String            @id @default(uuid()) @db.Uuid
  url             String
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  chat_roles      chat_roles[]
  text_templates  text_templates[]
  image_templates image_templates[]
}

enum payment_status {
  reversed
  created
  success
  failure
  expired
  hold
}

model payments {
  id         String         @id @default(uuid()) @db.Uuid
  user       telegram_users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    BigInt
  amount     Int
  tokens     Int
  status     payment_status
  provider   String?
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  expired_at DateTime?

  @@index([status, provider])
}

model telegram_users {
  id                       BigInt                     @id
  language                 languages?                 @relation(fields: [language_id], references: [id], onDelete: SetNull)
  payments                 payments[]
  language_id              Int?
  first_name               String
  last_name                String?
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @updatedAt
  referrer                 telegram_users?            @relation("referrer", fields: [referrer_id], references: [id], onDelete: SetNull)
  referrer_id              BigInt?
  referrals                telegram_users[]           @relation("referrer")
  chat_role_usage          chat_role_usage[]
  text_template_usage      text_template_usage[]
  image_template_usage     image_template_usage[]
  chat_role_reactions      chat_role_reactions[]
  text_template_reactions  text_template_reactions[]
  image_template_reactions image_template_reactions[]

  @@index([first_name, last_name])
}

model chat_roles {
  id          Int                   @id @default(autoincrement())
  name        String
  usage       chat_role_usage[]
  prompt      String                @default("")
  poster      images?               @relation(fields: [poster_id], references: [id], onDelete: SetNull)
  poster_id   String?               @db.Uuid
  category    chat_categories       @relation(fields: [category_id], references: [id], onDelete: Cascade)
  category_id Int
  language    languages             @relation(fields: [language_id], references: [id], onDelete: Cascade)
  language_id Int
  reactions   chat_role_reactions[]
  parameters  chat_role_parameters?
  description String?
}

model chat_role_usage {
  id         String         @id @default(uuid()) @db.Uuid
  type       String
  role       chat_roles     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id    Int
  user       telegram_users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    BigInt
  tokens     Int
  created_at DateTime       @default(now())

  @@index([type])
}

model chat_role_parameters {
  id                Int        @id @default(autoincrement())
  role              chat_roles @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id           Int        @unique
  model             String     @default("gpt-3.5-turbo")
  top_p             Float      @default(1)
  temperature       Float      @default(1)
  present_penalty   Float      @default(0)
  frequency_penalty Float      @default(0)
}

model chat_role_reactions {
  id         Int            @id @default(autoincrement())
  type       String
  user       telegram_users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    BigInt
  role       chat_roles     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id    Int
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt

  @@unique([user_id, role_id])
  @@index([type])
}

model chat_categories {
  id          Int          @id @default(autoincrement())
  name        String
  roles       chat_roles[]
  language    languages    @relation(fields: [language_id], references: [id], onDelete: Cascade)
  language_id Int
}

model text_templates {
  id          Int                       @id @default(autoincrement())
  name        String
  usage       text_template_usage[]
  poster      images?                   @relation(fields: [poster_id], references: [id], onDelete: SetNull)
  poster_id   String?                   @db.Uuid
  messages    text_template_messages[]
  category    text_categories           @relation(fields: [category_id], references: [id], onDelete: Cascade)
  category_id Int
  language    languages                 @relation(fields: [language_id], references: [id], onDelete: Cascade)
  language_id Int
  reactions   text_template_reactions[]
  parameters  text_template_parameters?
  description String?
}

model text_template_usage {
  id          String         @id @default(uuid()) @db.Uuid
  type        String
  user        telegram_users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     BigInt
  tokens      Int
  template    text_templates @relation(fields: [template_id], references: [id], onDelete: Cascade)
  template_id Int
  created_at  DateTime       @default(now())

  @@index([type])
}

model text_template_parameters {
  id                Int            @id @default(autoincrement())
  model             String         @default("gpt-3.5-turbo")
  top_p             Float          @default(1)
  template          text_templates @relation(fields: [template_id], references: [id], onDelete: Cascade)
  template_id       Int            @unique
  temperature       Float          @default(1)
  present_penalty   Float          @default(0)
  frequency_penalty Float          @default(0)
}

model text_template_messages {
  id          BigInt         @id @default(autoincrement())
  role        String
  content     String
  template    text_templates @relation(fields: [template_id], references: [id], onDelete: Cascade)
  template_id Int
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
}

model text_template_reactions {
  id          Int            @id @default(autoincrement())
  type        String
  user        telegram_users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     BigInt
  template    text_templates @relation(fields: [template_id], references: [id], onDelete: Cascade)
  template_id Int
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt

  @@unique([user_id, template_id])
  @@index([type])
}

model text_categories {
  id          Int              @id @default(autoincrement())
  name        String
  language    languages        @relation(fields: [language_id], references: [id], onDelete: Cascade)
  language_id Int
  templates   text_templates[]
}

model image_templates {
  id          Int                        @id @default(autoincrement())
  name        String
  model       String?
  usage       image_template_usage[]
  poster      images?                    @relation(fields: [poster_id], references: [id], onDelete: SetNull)
  poster_id   String?                    @db.Uuid
  provider    String
  language    languages                  @relation(fields: [language_id], references: [id], onDelete: Cascade)
  language_id Int
  reactions   image_template_reactions[]
  description String?

  @@index([provider])
}

model image_template_usage {
  id          String          @id @default(uuid()) @db.Uuid
  type        String
  user        telegram_users  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     BigInt
  tokens      Int
  template    image_templates @relation(fields: [template_id], references: [id], onDelete: Cascade)
  template_id Int
  resolution  String
  created_at  DateTime        @default(now())

  @@index([type])
}

model image_template_reactions {
  id          Int             @id @default(autoincrement())
  type        String
  user        telegram_users  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     BigInt
  template    image_templates @relation(fields: [template_id], references: [id], onDelete: Cascade)
  template_id Int
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt

  @@unique([user_id, template_id])
  @@index([type])
}
