// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  surname  String
  password String
}

model languages {
  id              Int               @id @default(autoincrement()) @db.SmallInt
  name            String            @unique
  code            String            @unique @db.VarChar(2)
  roles           chat_roles[]
  text_templates  text_templates[]
  text_categories text_categories[]
  image_templates image_templates[]
  chat_categories chat_categories[]
}

model images {
  id              BigInt            @id @default(autoincrement())
  url             String
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  chat_roles      chat_roles[]
  text_templates  text_templates[]
  image_templates image_templates[]
}

model telegram_clients {
  id           BigInt         @id
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  interactions interactions[]
}

enum interaction_type {
  like
  dislike
  generate
}

model interactions {
  id              BigInt            @id @default(autoincrement())
  type            interaction_type
  client          telegram_clients  @relation(fields: [client_id], references: [id], onDelete: Cascade)
  client_id       BigInt
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  chat_roles      chat_roles[]
  text_templates  text_templates[]
  image_templates image_templates[]
}

model gpt_messages {
  id             BigInt           @id @default(autoincrement())
  role           String
  content        String
  chat_role      chat_roles?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  text_templates text_templates[]
}

model gpt_chat_parameters {
  id                Int             @id @default(autoincrement())
  model             String          @default("gpt-3.5-turbo")
  top_p             Float           @default(1)
  chat_roles        chat_roles?
  temperature       Float           @default(1)
  text_templates    text_templates?
  present_penalty   Float           @default(0)
  frequency_penalty Float           @default(0)
}

model chat_roles {
  id            Int                 @id @default(autoincrement())
  name          String
  poster        images?             @relation(fields: [poster_id], references: [id], onDelete: SetNull)
  poster_id     BigInt?
  message       gpt_messages        @relation(fields: [message_id], references: [id], onDelete: Cascade)
  message_id    BigInt              @unique
  category      chat_categories     @relation(fields: [category_id], references: [id], onDelete: Cascade)
  category_id   Int
  language      languages           @relation(fields: [language_id], references: [id], onDelete: Cascade)
  language_id   Int
  parameters    gpt_chat_parameters @relation(fields: [parameters_id], references: [id], onDelete: Cascade)
  parameters_id Int                 @unique
  description   String?
  interactions  interactions[]
}

model chat_categories {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  roles       chat_roles[]
  language    languages    @relation(fields: [language_id], references: [id], onDelete: Cascade)
  language_id Int
}

model text_templates {
  id            Int                 @id @default(autoincrement())
  name          String
  poster        images?             @relation(fields: [poster_id], references: [id], onDelete: SetNull)
  poster_id     BigInt?
  messages      gpt_messages[]
  category      text_categories     @relation(fields: [category_id], references: [id], onDelete: Cascade)
  category_id   Int
  language      languages           @relation(fields: [language_id], references: [id], onDelete: Cascade)
  language_id   Int
  parameters    gpt_chat_parameters @relation(fields: [parameters_id], references: [id], onDelete: Cascade)
  parameters_id Int                 @unique
  description   String?
  interactions  interactions[]
}

model text_categories {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  language    languages        @relation(fields: [language_id], references: [id], onDelete: Cascade)
  language_id Int
  templates   text_templates[]
}

model image_templates {
  id           Int            @id @default(autoincrement())
  name         String
  model        String?
  poster       images?        @relation(fields: [poster_id], references: [id], onDelete: SetNull)
  poster_id    BigInt?
  provider     String
  language     languages      @relation(fields: [languages_id], references: [id], onDelete: Cascade)
  languages_id Int
  description  String?
  interactions interactions[]
}
